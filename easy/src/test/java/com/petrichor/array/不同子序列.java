package com.petrichor.array;

/**
 * @Author jh
 * @Description
 * @Date created in 17:12 2023/2/15
 */

import org.junit.Test;

/**
 * 115. 不同的子序列
 * 给定一个字符串 s 和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。
 *
 * 字符串的一个 子序列 是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，"ACE" 是 "ABCDE" 的一个子序列，而 "AEC" 不是）
 *
 * 题目数据保证答案符合 32 位带符号整数范围。
 *
 *
 *
 * 示例 1：
 *
 * 输入：s = "rabbbit", t = "rabbit"
 * 输出：3
 * 解释：
 * 如下图所示, 有 3 种可以从 s 中得到 "rabbit" 的方案。
 * rabbbit
 * rabbbit
 * rabbbit
 * 示例 2：
 *
 * 输入：s = "babgbag", t = "bag"
 * 输出：5
 * 解释：
 * 如下图所示, 有 5 种可以从 s 中得到 "bag" 的方案。
 * babgbag
 * babgbag
 * babgbag
 * babgbag
 * babgbag
 *
 *
 * 提示：
 *
 * 0 <= s.length, t.length <= 1000
 * s 和 t 由英文字母组成
 */
public class 不同子序列 {

    //在上面的代码中，使用动态规划的思想，定义一个二维数组 dp，其中 dp[i][j] 表示字符串 s 的前 i 个字符和字符串 t 的前 j 个字符的不同子序列个数。
    // 初始化时，当 t 为空字符串时，s 的任何子序列都可以构成一个 t 的子序列，因此将 dp[i][0] 都设置为 1。
    // 然后通过两层循环遍历 s 和 t，当 s 的第 i 个字符等于 t 的第 j 个字符时，说明可以选择保留 s 的第 i 个字符作为 t 的第 j 个字符，
    // 也可以选择删除 s 的第 i 个字符，所以此时有 dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]。当 s 的第 i 个字符不等于 t 的第 j 个字符时，
    // 说明只能选择删除 s 的第 i 个字符，所以有 dp[i][j] = dp[i - 1][j]。最终 dp[m][n] 就是所求的不同子序列个数，其中 m 和 n 分别表示字符串 s 和 t 的长度。


    //不同子序列问题是一种经典的动态规划问题，其目标是求解一个字符串中有多少种不同的子序列（不一定连续），满足特定的条件。
    //
    //下面按照动态规划的步骤来帮助理解不同子序列问题：
    //
    //定义问题的状态：在不同子序列问题中，通常需要定义两个字符串的状态。例如，假设给定两个字符串 s 和 t，我们可以定义两个指针 i 和 j 分别指向字符串 s 和 t 的某个位置，用于表示问题的状态。
    //
    //制定状态转移方程：根据问题的状态定义，我们需要找到状态之间的转移关系。在不同子序列问题中，通常需要考虑两种情况：
    //
    //当 s[i] 等于 t[j] 时，可以选择将两个字符同时添加到子序列中，此时子序列的数量与 s[i-1] 和 t[j-1] 的子序列数量相同；
    //当 s[i] 不等于 t[j] 时，可以选择将 s[i] 添加到子序列中，而不将 t[j] 添加到子序列中，此时子序列的数量与 s[i-1] 的子序列数量相同。
    //综上，可以得到状态转移方程：dp[i][j] = dp[i-1][j-1] + dp[i-1][j]，其中 dp[i][j] 表示字符串 s 的前 i 个字符和字符串 t 的前 j 个字符之间的不同子序列数量。
    //
    //初始化状态：需要根据问题的具体要求进行初始化。例如，可以将 dp[0][0] 初始化为 1，表示空字符串是任何字符串的子序列；可以将 dp[0][j] 初始化为 0，表示空字符串不能作为非空字符串的子序列；可以将 dp[i][0] 初始化为 1，表示任何字符串都是空字符串的子序列。
    //
    //通过递推或递归的方式计算问题的最优解：根据状态转移方程，从初始状态开始递推或递归地计算问题的最优解。通常可以使用两层循环遍历字符串 s 和 t 的每个字符，依次更新 dp[i][j] 的值。
    //
    //存储计算结果：为了避免重复计算，通常使用二维数组 dp 或者其他方式来存储中间计算结果，以便在需要时直接获取。
    //
    //根据需要返回最优解：最终得到问题的最优解，可以根据需要返回，例如返回 dp[m][n]，其中 m 和 n 分别表示字符串 s 和 t 的长度，即表示两个字符串的不同子序列数量。
    //
    //通过以上步骤，可以使用动态规划的方法来解决不同子序列问题，得到高效且正确的解答。
    //     *    *  b  a  b  g  b  a  g
    //     * *  1  1  1  1  1  1  1  1
    //     * b  0  1  1  2  2  3  3  3
    //     * a  0  0  1  1  1  1  4  4
    //     * g  0  0  0  0  1  1  1  5              5 = 4(4个ba子序列) + 1(1个bag子序列)

    @Test
    public void main(){
        System.out.println(numDistinct("babgbag", "bag"));
    }

    public int numDistinct(String s, String t) {

        int m = s.length();//列
        int n = t.length();//行

        //初始化数组
        int[][] arr = new int[m + 1][n + 1];
        for (int i = 0; i <= m; i++) {
            arr[i][0]=1;
        }

        for (int i = 1; i <= m ; i++) {
            for (int j = 1; j <= n; j++) {
                if (s.charAt(i-1) == t.charAt(j-1)){
                    arr[i][j] = arr[i-1][j-1] + arr[i-1][j];
                }else {
                    arr[i][j] = arr[i-1][j];
                }
            }
        }

        return arr[m][n];
    }

}
